// this file is automatically generated by GenerateNDSupport.fsx
#pragma once
#include "Utils.cuh" 

// ======================== dimensionality: 0 ==================================

struct Pos0D {
   size_t pos[1];
    template<typename TArrayND>
   _dev static Pos0D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos0D p;
     p.pos[0] = 0;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos0D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos0D p = fromLinearIdx(ary, idx);
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     return 0;
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

struct ShapeStatic0D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      return 0;
   }
};

struct ShapeDynamic0D {
  	_dev size_t shape(const size_t dim) const { return 0; }
};

template <size_t offset_>
struct StrideStatic0D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic0D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
  	_dev size_t stride(const size_t dim) const { return 0; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND0D : TShape, TStride {
  typedef Pos0D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 0; }
  _dev size_t index() const {
      return this->offset() + 0;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + 0;
  }
  _dev size_t index(const Pos0D &pos) const {
      return this->offset() + 0;
  }
  _dev size_t size() const {
    return 1;
  }
  _dev Pos0D linearIdxToPos(size_t idx) const { return Pos0D::fromLinearIdx(*this, idx); }
  _dev Pos0D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos0D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element() {
    return data()[index()];
  }
  _dev const TData &element() const {
    return data()[index()];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos0D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos0D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary0D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0);

}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary0D(const TElemwiseOp &op, TTarget &trgt) {

  trgt.element() = op();

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {

  trgt.element() = op(src0.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {

  trgt.element() = op(src0.element(), src1.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {

  trgt.element() = op(src0.element(), src1.element(), src2.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element(), src27.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element(), src27.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element(), src27.element(), src28.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element(), src27.element(), src28.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary0DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t *pos = nullptr;

  trgt.element() = op(pos, 0, src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element(), src27.element(), src28.element(), src29.element());

}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary0D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {

  trgt.element() = op(src0.element(), src1.element(), src2.element(), src3.element(), src4.element(), src5.element(), src6.element(), src7.element(), src8.element(), src9.element(), src10.element(), src11.element(), src12.element(), src13.element(), src14.element(), src15.element(), src16.element(), src17.element(), src18.element(), src19.element(), src20.element(), src21.element(), src22.element(), src23.element(), src24.element(), src25.element(), src26.element(), src27.element(), src28.element(), src29.element());

}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo0D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(0); reducePos++) {
    v = op(v, src.element(reducePos));
  }
  trgt.element() = v;

}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary0D(const TElementsOp &op, TTarget &trgt) {

  trgt.element() = op();

}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {

  trgt.element() = op(src0);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {

  trgt.element() = op(src0, src1);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {

  trgt.element() = op(src0, src1, src2);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {

  trgt.element() = op(src0, src1, src2, src3);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {

  trgt.element() = op(src0, src1, src2, src3, src4);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary0D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {

  trgt.element() = op(src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

}

// ======================== dimensionality: 1 ==================================

struct Pos1D {
   size_t pos[1];
    template<typename TArrayND>
   _dev static Pos1D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos1D p;
     const size_t incr0 = 1;
     p.pos[0] = idx / incr0;
     idx -= p.pos[0] * incr0;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos1D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos1D p = fromLinearIdx(ary, idx);
     p[0] = 0;
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     const size_t incr0 = 1;
     return incr0 * pos[0];
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

template <size_t shape0>
struct ShapeStatic1D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      switch (dim) {
        case 0: return shape0;
        default: return 0;
      }
   }
};

struct ShapeDynamic1D {
   size_t mShape[1];
  	_dev size_t shape(const size_t dim) const { return mShape[dim]; }
};

template <size_t offset_, size_t stride0>
struct StrideStatic1D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        case 0: return stride0;
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic1D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
   size_t mStride[1];
  	_dev size_t stride(const size_t dim) const { return mStride[dim]; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND1D : TShape, TStride {
  typedef Pos1D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 1; }
  _dev size_t index(const size_t pos0) const {
      return this->offset() + this->stride(0) * pos0;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + this->stride(0) * pos[0];
  }
  _dev size_t index(const Pos1D &pos) const {
      return this->offset() + this->stride(0) * pos[0];
  }
  _dev size_t size() const {
    return this->shape(0);
  }
  _dev Pos1D linearIdxToPos(size_t idx) const { return Pos1D::fromLinearIdx(*this, idx); }
  _dev Pos1D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos1D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element(size_t pos0) {
    return data()[index(pos0)];
  }
  _dev const TData &element(size_t pos0) const {
    return data()[index(pos0)];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos1D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos1D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary1D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1);

 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary1D(const TElemwiseOp &op, TTarget &trgt) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op();

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0), src27.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0), src27.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0), src27.element(pos0), src28.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0), src27.element(pos0), src28.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary1DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0};

  trgt.element(pos0) = op(pos, 1, src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0), src27.element(pos0), src28.element(pos0), src29.element(pos0));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary1D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(src0.element(pos0), src1.element(pos0), src2.element(pos0), src3.element(pos0), src4.element(pos0), src5.element(pos0), src6.element(pos0), src7.element(pos0), src8.element(pos0), src9.element(pos0), src10.element(pos0), src11.element(pos0), src12.element(pos0), src13.element(pos0), src14.element(pos0), src15.element(pos0), src16.element(pos0), src17.element(pos0), src18.element(pos0), src19.element(pos0), src20.element(pos0), src21.element(pos0), src22.element(pos0), src23.element(pos0), src24.element(pos0), src25.element(pos0), src26.element(pos0), src27.element(pos0), src28.element(pos0), src29.element(pos0));

 }
}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo1D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(1); reducePos++) {
    v = op(v, src.element(pos0, reducePos));
  }
  trgt.element(pos0) = v;

 }
}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary1D(const TElementsOp &op, TTarget &trgt) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary1D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0) = op(pos0, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

 }
}

// ======================== dimensionality: 2 ==================================

struct Pos2D {
   size_t pos[2];
    template<typename TArrayND>
   _dev static Pos2D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos2D p;
     const size_t incr1 = 1;
     const size_t incr0 = incr1 * ary.shape(1);
     p.pos[0] = idx / incr0;
     idx -= p.pos[0] * incr0;
     p.pos[1] = idx / incr1;
     idx -= p.pos[1] * incr1;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos2D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos2D p = fromLinearIdx(ary, idx);
     p[1] = 0;
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     const size_t incr1 = 1;
     const size_t incr0 = incr1 * ary.shape(1);
     return incr0 * pos[0] + incr1 * pos[1];
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

template <size_t shape0, size_t shape1>
struct ShapeStatic2D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      switch (dim) {
        case 0: return shape0;
        case 1: return shape1;
        default: return 0;
      }
   }
};

struct ShapeDynamic2D {
   size_t mShape[2];
  	_dev size_t shape(const size_t dim) const { return mShape[dim]; }
};

template <size_t offset_, size_t stride0, size_t stride1>
struct StrideStatic2D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        case 0: return stride0;
        case 1: return stride1;
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic2D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
   size_t mStride[2];
  	_dev size_t stride(const size_t dim) const { return mStride[dim]; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND2D : TShape, TStride {
  typedef Pos2D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 2; }
  _dev size_t index(const size_t pos0, const size_t pos1) const {
      return this->offset() + this->stride(0) * pos0 + this->stride(1) * pos1;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1];
  }
  _dev size_t index(const Pos2D &pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1];
  }
  _dev size_t size() const {
    return this->shape(0) * this->shape(1);
  }
  _dev Pos2D linearIdxToPos(size_t idx) const { return Pos2D::fromLinearIdx(*this, idx); }
  _dev Pos2D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos2D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element(size_t pos0, size_t pos1) {
    return data()[index(pos0, pos1)];
  }
  _dev const TData &element(size_t pos0, size_t pos1) const {
    return data()[index(pos0, pos1)];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos2D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos2D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary2D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2);

 }
 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary2D(const TElemwiseOp &op, TTarget &trgt) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op();

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1), src27.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1), src27.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1), src27.element(pos0, pos1), src28.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1), src27.element(pos0, pos1), src28.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary2DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1};

  trgt.element(pos0, pos1) = op(pos, 2, src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1), src27.element(pos0, pos1), src28.element(pos0, pos1), src29.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary2D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(src0.element(pos0, pos1), src1.element(pos0, pos1), src2.element(pos0, pos1), src3.element(pos0, pos1), src4.element(pos0, pos1), src5.element(pos0, pos1), src6.element(pos0, pos1), src7.element(pos0, pos1), src8.element(pos0, pos1), src9.element(pos0, pos1), src10.element(pos0, pos1), src11.element(pos0, pos1), src12.element(pos0, pos1), src13.element(pos0, pos1), src14.element(pos0, pos1), src15.element(pos0, pos1), src16.element(pos0, pos1), src17.element(pos0, pos1), src18.element(pos0, pos1), src19.element(pos0, pos1), src20.element(pos0, pos1), src21.element(pos0, pos1), src22.element(pos0, pos1), src23.element(pos0, pos1), src24.element(pos0, pos1), src25.element(pos0, pos1), src26.element(pos0, pos1), src27.element(pos0, pos1), src28.element(pos0, pos1), src29.element(pos0, pos1));

 }
 }
}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo2D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(2); reducePos++) {
    v = op(v, src.element(pos0, pos1, reducePos));
  }
  trgt.element(pos0, pos1) = v;

 }
 }
}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary2D(const TElementsOp &op, TTarget &trgt) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary2D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1) = op(pos0, pos1, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

 }
 }
}

// ======================== dimensionality: 3 ==================================

struct Pos3D {
   size_t pos[3];
    template<typename TArrayND>
   _dev static Pos3D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos3D p;
     const size_t incr2 = 1;
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     p.pos[0] = idx / incr0;
     idx -= p.pos[0] * incr0;
     p.pos[1] = idx / incr1;
     idx -= p.pos[1] * incr1;
     p.pos[2] = idx / incr2;
     idx -= p.pos[2] * incr2;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos3D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos3D p = fromLinearIdx(ary, idx);
     p[2] = 0;
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     const size_t incr2 = 1;
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     return incr0 * pos[0] + incr1 * pos[1] + incr2 * pos[2];
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

template <size_t shape0, size_t shape1, size_t shape2>
struct ShapeStatic3D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      switch (dim) {
        case 0: return shape0;
        case 1: return shape1;
        case 2: return shape2;
        default: return 0;
      }
   }
};

struct ShapeDynamic3D {
   size_t mShape[3];
  	_dev size_t shape(const size_t dim) const { return mShape[dim]; }
};

template <size_t offset_, size_t stride0, size_t stride1, size_t stride2>
struct StrideStatic3D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        case 0: return stride0;
        case 1: return stride1;
        case 2: return stride2;
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic3D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
   size_t mStride[3];
  	_dev size_t stride(const size_t dim) const { return mStride[dim]; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND3D : TShape, TStride {
  typedef Pos3D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 3; }
  _dev size_t index(const size_t pos0, const size_t pos1, const size_t pos2) const {
      return this->offset() + this->stride(0) * pos0 + this->stride(1) * pos1 + this->stride(2) * pos2;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2];
  }
  _dev size_t index(const Pos3D &pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2];
  }
  _dev size_t size() const {
    return this->shape(0) * this->shape(1) * this->shape(2);
  }
  _dev Pos3D linearIdxToPos(size_t idx) const { return Pos3D::fromLinearIdx(*this, idx); }
  _dev Pos3D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos3D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element(size_t pos0, size_t pos1, size_t pos2) {
    return data()[index(pos0, pos1, pos2)];
  }
  _dev const TData &element(size_t pos0, size_t pos1, size_t pos2) const {
    return data()[index(pos0, pos1, pos2)];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos3D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos3D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary3D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3);

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary3D(const TElemwiseOp &op, TTarget &trgt) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op();

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2), src27.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2), src27.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2), src27.element(pos0, pos1, pos2), src28.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2), src27.element(pos0, pos1, pos2), src28.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary3DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 const size_t pos[] {pos0, pos1, pos2};

  trgt.element(pos0, pos1, pos2) = op(pos, 3, src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2), src27.element(pos0, pos1, pos2), src28.element(pos0, pos1, pos2), src29.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary3D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(src0.element(pos0, pos1, pos2), src1.element(pos0, pos1, pos2), src2.element(pos0, pos1, pos2), src3.element(pos0, pos1, pos2), src4.element(pos0, pos1, pos2), src5.element(pos0, pos1, pos2), src6.element(pos0, pos1, pos2), src7.element(pos0, pos1, pos2), src8.element(pos0, pos1, pos2), src9.element(pos0, pos1, pos2), src10.element(pos0, pos1, pos2), src11.element(pos0, pos1, pos2), src12.element(pos0, pos1, pos2), src13.element(pos0, pos1, pos2), src14.element(pos0, pos1, pos2), src15.element(pos0, pos1, pos2), src16.element(pos0, pos1, pos2), src17.element(pos0, pos1, pos2), src18.element(pos0, pos1, pos2), src19.element(pos0, pos1, pos2), src20.element(pos0, pos1, pos2), src21.element(pos0, pos1, pos2), src22.element(pos0, pos1, pos2), src23.element(pos0, pos1, pos2), src24.element(pos0, pos1, pos2), src25.element(pos0, pos1, pos2), src26.element(pos0, pos1, pos2), src27.element(pos0, pos1, pos2), src28.element(pos0, pos1, pos2), src29.element(pos0, pos1, pos2));

 }
 }
 }
}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo3D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(3); reducePos++) {
    v = op(v, src.element(pos0, pos1, pos2, reducePos));
  }
  trgt.element(pos0, pos1, pos2) = v;

 }
 }
 }
}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary3D(const TElementsOp &op, TTarget &trgt) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary3D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t pos2 = threadIdx.z + blockIdx.z * blockDim.z; pos2 < trgt.shape(2); pos2 += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {

  trgt.element(pos0, pos1, pos2) = op(pos0, pos1, pos2, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

 }
 }
 }
}

// ======================== dimensionality: 4 ==================================

struct Pos4D {
   size_t pos[4];
    template<typename TArrayND>
   _dev static Pos4D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos4D p;
     const size_t incr3 = 1;
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     p.pos[0] = idx / incr0;
     idx -= p.pos[0] * incr0;
     p.pos[1] = idx / incr1;
     idx -= p.pos[1] * incr1;
     p.pos[2] = idx / incr2;
     idx -= p.pos[2] * incr2;
     p.pos[3] = idx / incr3;
     idx -= p.pos[3] * incr3;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos4D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos4D p = fromLinearIdx(ary, idx);
     p[3] = 0;
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     const size_t incr3 = 1;
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     return incr0 * pos[0] + incr1 * pos[1] + incr2 * pos[2] + incr3 * pos[3];
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

template <size_t shape0, size_t shape1, size_t shape2, size_t shape3>
struct ShapeStatic4D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      switch (dim) {
        case 0: return shape0;
        case 1: return shape1;
        case 2: return shape2;
        case 3: return shape3;
        default: return 0;
      }
   }
};

struct ShapeDynamic4D {
   size_t mShape[4];
  	_dev size_t shape(const size_t dim) const { return mShape[dim]; }
};

template <size_t offset_, size_t stride0, size_t stride1, size_t stride2, size_t stride3>
struct StrideStatic4D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        case 0: return stride0;
        case 1: return stride1;
        case 2: return stride2;
        case 3: return stride3;
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic4D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
   size_t mStride[4];
  	_dev size_t stride(const size_t dim) const { return mStride[dim]; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND4D : TShape, TStride {
  typedef Pos4D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 4; }
  _dev size_t index(const size_t pos0, const size_t pos1, const size_t pos2, const size_t pos3) const {
      return this->offset() + this->stride(0) * pos0 + this->stride(1) * pos1 + this->stride(2) * pos2 + this->stride(3) * pos3;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3];
  }
  _dev size_t index(const Pos4D &pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3];
  }
  _dev size_t size() const {
    return this->shape(0) * this->shape(1) * this->shape(2) * this->shape(3);
  }
  _dev Pos4D linearIdxToPos(size_t idx) const { return Pos4D::fromLinearIdx(*this, idx); }
  _dev Pos4D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos4D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3) {
    return data()[index(pos0, pos1, pos2, pos3)];
  }
  _dev const TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3) const {
    return data()[index(pos0, pos1, pos2, pos3)];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos4D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos4D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary4D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4);

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary4D(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op();

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3), src27.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3), src27.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3), src27.element(pos0, pos1, pos2, pos3), src28.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3), src27.element(pos0, pos1, pos2, pos3), src28.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary4DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3};

  trgt.element(pos0, pos1, pos2, pos3) = op(pos, 4, src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3), src27.element(pos0, pos1, pos2, pos3), src28.element(pos0, pos1, pos2, pos3), src29.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary4D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(src0.element(pos0, pos1, pos2, pos3), src1.element(pos0, pos1, pos2, pos3), src2.element(pos0, pos1, pos2, pos3), src3.element(pos0, pos1, pos2, pos3), src4.element(pos0, pos1, pos2, pos3), src5.element(pos0, pos1, pos2, pos3), src6.element(pos0, pos1, pos2, pos3), src7.element(pos0, pos1, pos2, pos3), src8.element(pos0, pos1, pos2, pos3), src9.element(pos0, pos1, pos2, pos3), src10.element(pos0, pos1, pos2, pos3), src11.element(pos0, pos1, pos2, pos3), src12.element(pos0, pos1, pos2, pos3), src13.element(pos0, pos1, pos2, pos3), src14.element(pos0, pos1, pos2, pos3), src15.element(pos0, pos1, pos2, pos3), src16.element(pos0, pos1, pos2, pos3), src17.element(pos0, pos1, pos2, pos3), src18.element(pos0, pos1, pos2, pos3), src19.element(pos0, pos1, pos2, pos3), src20.element(pos0, pos1, pos2, pos3), src21.element(pos0, pos1, pos2, pos3), src22.element(pos0, pos1, pos2, pos3), src23.element(pos0, pos1, pos2, pos3), src24.element(pos0, pos1, pos2, pos3), src25.element(pos0, pos1, pos2, pos3), src26.element(pos0, pos1, pos2, pos3), src27.element(pos0, pos1, pos2, pos3), src28.element(pos0, pos1, pos2, pos3), src29.element(pos0, pos1, pos2, pos3));

 }
 }
 }
}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo4D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(4); reducePos++) {
    v = op(v, src.element(pos0, pos1, pos2, pos3, reducePos));
  }
  trgt.element(pos0, pos1, pos2, pos3) = v;

 }
 }
 }
}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary4D(const TElementsOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary4D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3) = op(pos0, pos1, pos2, pos3, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

 }
 }
 }
}

// ======================== dimensionality: 5 ==================================

struct Pos5D {
   size_t pos[5];
    template<typename TArrayND>
   _dev static Pos5D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos5D p;
     const size_t incr4 = 1;
     const size_t incr3 = incr4 * ary.shape(4);
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     p.pos[0] = idx / incr0;
     idx -= p.pos[0] * incr0;
     p.pos[1] = idx / incr1;
     idx -= p.pos[1] * incr1;
     p.pos[2] = idx / incr2;
     idx -= p.pos[2] * incr2;
     p.pos[3] = idx / incr3;
     idx -= p.pos[3] * incr3;
     p.pos[4] = idx / incr4;
     idx -= p.pos[4] * incr4;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos5D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos5D p = fromLinearIdx(ary, idx);
     p[4] = 0;
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     const size_t incr4 = 1;
     const size_t incr3 = incr4 * ary.shape(4);
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     return incr0 * pos[0] + incr1 * pos[1] + incr2 * pos[2] + incr3 * pos[3] + incr4 * pos[4];
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

template <size_t shape0, size_t shape1, size_t shape2, size_t shape3, size_t shape4>
struct ShapeStatic5D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      switch (dim) {
        case 0: return shape0;
        case 1: return shape1;
        case 2: return shape2;
        case 3: return shape3;
        case 4: return shape4;
        default: return 0;
      }
   }
};

struct ShapeDynamic5D {
   size_t mShape[5];
  	_dev size_t shape(const size_t dim) const { return mShape[dim]; }
};

template <size_t offset_, size_t stride0, size_t stride1, size_t stride2, size_t stride3, size_t stride4>
struct StrideStatic5D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        case 0: return stride0;
        case 1: return stride1;
        case 2: return stride2;
        case 3: return stride3;
        case 4: return stride4;
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic5D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
   size_t mStride[5];
  	_dev size_t stride(const size_t dim) const { return mStride[dim]; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND5D : TShape, TStride {
  typedef Pos5D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 5; }
  _dev size_t index(const size_t pos0, const size_t pos1, const size_t pos2, const size_t pos3, const size_t pos4) const {
      return this->offset() + this->stride(0) * pos0 + this->stride(1) * pos1 + this->stride(2) * pos2 + this->stride(3) * pos3 + this->stride(4) * pos4;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3] + this->stride(4) * pos[4];
  }
  _dev size_t index(const Pos5D &pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3] + this->stride(4) * pos[4];
  }
  _dev size_t size() const {
    return this->shape(0) * this->shape(1) * this->shape(2) * this->shape(3) * this->shape(4);
  }
  _dev Pos5D linearIdxToPos(size_t idx) const { return Pos5D::fromLinearIdx(*this, idx); }
  _dev Pos5D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos5D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3, size_t pos4) {
    return data()[index(pos0, pos1, pos2, pos3, pos4)];
  }
  _dev const TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3, size_t pos4) const {
    return data()[index(pos0, pos1, pos2, pos3, pos4)];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos5D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos5D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary5D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5);

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary5D(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op();

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4), src27.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4), src27.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4), src27.element(pos0, pos1, pos2, pos3, pos4), src28.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4), src27.element(pos0, pos1, pos2, pos3, pos4), src28.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary5DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4};

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos, 5, src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4), src27.element(pos0, pos1, pos2, pos3, pos4), src28.element(pos0, pos1, pos2, pos3, pos4), src29.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary5D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(src0.element(pos0, pos1, pos2, pos3, pos4), src1.element(pos0, pos1, pos2, pos3, pos4), src2.element(pos0, pos1, pos2, pos3, pos4), src3.element(pos0, pos1, pos2, pos3, pos4), src4.element(pos0, pos1, pos2, pos3, pos4), src5.element(pos0, pos1, pos2, pos3, pos4), src6.element(pos0, pos1, pos2, pos3, pos4), src7.element(pos0, pos1, pos2, pos3, pos4), src8.element(pos0, pos1, pos2, pos3, pos4), src9.element(pos0, pos1, pos2, pos3, pos4), src10.element(pos0, pos1, pos2, pos3, pos4), src11.element(pos0, pos1, pos2, pos3, pos4), src12.element(pos0, pos1, pos2, pos3, pos4), src13.element(pos0, pos1, pos2, pos3, pos4), src14.element(pos0, pos1, pos2, pos3, pos4), src15.element(pos0, pos1, pos2, pos3, pos4), src16.element(pos0, pos1, pos2, pos3, pos4), src17.element(pos0, pos1, pos2, pos3, pos4), src18.element(pos0, pos1, pos2, pos3, pos4), src19.element(pos0, pos1, pos2, pos3, pos4), src20.element(pos0, pos1, pos2, pos3, pos4), src21.element(pos0, pos1, pos2, pos3, pos4), src22.element(pos0, pos1, pos2, pos3, pos4), src23.element(pos0, pos1, pos2, pos3, pos4), src24.element(pos0, pos1, pos2, pos3, pos4), src25.element(pos0, pos1, pos2, pos3, pos4), src26.element(pos0, pos1, pos2, pos3, pos4), src27.element(pos0, pos1, pos2, pos3, pos4), src28.element(pos0, pos1, pos2, pos3, pos4), src29.element(pos0, pos1, pos2, pos3, pos4));

 }
 }
 }
}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo5D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(5); reducePos++) {
    v = op(v, src.element(pos0, pos1, pos2, pos3, pos4, reducePos));
  }
  trgt.element(pos0, pos1, pos2, pos3, pos4) = v;

 }
 }
 }
}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary5D(const TElementsOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary5D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4) = op(pos0, pos1, pos2, pos3, pos4, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

 }
 }
 }
}

// ======================== dimensionality: 6 ==================================

struct Pos6D {
   size_t pos[6];
    template<typename TArrayND>
   _dev static Pos6D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos6D p;
     const size_t incr5 = 1;
     const size_t incr4 = incr5 * ary.shape(5);
     const size_t incr3 = incr4 * ary.shape(4);
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     p.pos[0] = idx / incr0;
     idx -= p.pos[0] * incr0;
     p.pos[1] = idx / incr1;
     idx -= p.pos[1] * incr1;
     p.pos[2] = idx / incr2;
     idx -= p.pos[2] * incr2;
     p.pos[3] = idx / incr3;
     idx -= p.pos[3] * incr3;
     p.pos[4] = idx / incr4;
     idx -= p.pos[4] * incr4;
     p.pos[5] = idx / incr5;
     idx -= p.pos[5] * incr5;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos6D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos6D p = fromLinearIdx(ary, idx);
     p[5] = 0;
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     const size_t incr5 = 1;
     const size_t incr4 = incr5 * ary.shape(5);
     const size_t incr3 = incr4 * ary.shape(4);
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     return incr0 * pos[0] + incr1 * pos[1] + incr2 * pos[2] + incr3 * pos[3] + incr4 * pos[4] + incr5 * pos[5];
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

template <size_t shape0, size_t shape1, size_t shape2, size_t shape3, size_t shape4, size_t shape5>
struct ShapeStatic6D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      switch (dim) {
        case 0: return shape0;
        case 1: return shape1;
        case 2: return shape2;
        case 3: return shape3;
        case 4: return shape4;
        case 5: return shape5;
        default: return 0;
      }
   }
};

struct ShapeDynamic6D {
   size_t mShape[6];
  	_dev size_t shape(const size_t dim) const { return mShape[dim]; }
};

template <size_t offset_, size_t stride0, size_t stride1, size_t stride2, size_t stride3, size_t stride4, size_t stride5>
struct StrideStatic6D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        case 0: return stride0;
        case 1: return stride1;
        case 2: return stride2;
        case 3: return stride3;
        case 4: return stride4;
        case 5: return stride5;
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic6D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
   size_t mStride[6];
  	_dev size_t stride(const size_t dim) const { return mStride[dim]; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND6D : TShape, TStride {
  typedef Pos6D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 6; }
  _dev size_t index(const size_t pos0, const size_t pos1, const size_t pos2, const size_t pos3, const size_t pos4, const size_t pos5) const {
      return this->offset() + this->stride(0) * pos0 + this->stride(1) * pos1 + this->stride(2) * pos2 + this->stride(3) * pos3 + this->stride(4) * pos4 + this->stride(5) * pos5;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3] + this->stride(4) * pos[4] + this->stride(5) * pos[5];
  }
  _dev size_t index(const Pos6D &pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3] + this->stride(4) * pos[4] + this->stride(5) * pos[5];
  }
  _dev size_t size() const {
    return this->shape(0) * this->shape(1) * this->shape(2) * this->shape(3) * this->shape(4) * this->shape(5);
  }
  _dev Pos6D linearIdxToPos(size_t idx) const { return Pos6D::fromLinearIdx(*this, idx); }
  _dev Pos6D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos6D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3, size_t pos4, size_t pos5) {
    return data()[index(pos0, pos1, pos2, pos3, pos4, pos5)];
  }
  _dev const TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3, size_t pos4, size_t pos5) const {
    return data()[index(pos0, pos1, pos2, pos3, pos4, pos5)];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos6D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos6D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary6D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6);

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary6D(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op();

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5), src27.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5), src27.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5), src27.element(pos0, pos1, pos2, pos3, pos4, pos5), src28.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5), src27.element(pos0, pos1, pos2, pos3, pos4, pos5), src28.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary6DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos, 6, src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5), src27.element(pos0, pos1, pos2, pos3, pos4, pos5), src28.element(pos0, pos1, pos2, pos3, pos4, pos5), src29.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary6D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5), src1.element(pos0, pos1, pos2, pos3, pos4, pos5), src2.element(pos0, pos1, pos2, pos3, pos4, pos5), src3.element(pos0, pos1, pos2, pos3, pos4, pos5), src4.element(pos0, pos1, pos2, pos3, pos4, pos5), src5.element(pos0, pos1, pos2, pos3, pos4, pos5), src6.element(pos0, pos1, pos2, pos3, pos4, pos5), src7.element(pos0, pos1, pos2, pos3, pos4, pos5), src8.element(pos0, pos1, pos2, pos3, pos4, pos5), src9.element(pos0, pos1, pos2, pos3, pos4, pos5), src10.element(pos0, pos1, pos2, pos3, pos4, pos5), src11.element(pos0, pos1, pos2, pos3, pos4, pos5), src12.element(pos0, pos1, pos2, pos3, pos4, pos5), src13.element(pos0, pos1, pos2, pos3, pos4, pos5), src14.element(pos0, pos1, pos2, pos3, pos4, pos5), src15.element(pos0, pos1, pos2, pos3, pos4, pos5), src16.element(pos0, pos1, pos2, pos3, pos4, pos5), src17.element(pos0, pos1, pos2, pos3, pos4, pos5), src18.element(pos0, pos1, pos2, pos3, pos4, pos5), src19.element(pos0, pos1, pos2, pos3, pos4, pos5), src20.element(pos0, pos1, pos2, pos3, pos4, pos5), src21.element(pos0, pos1, pos2, pos3, pos4, pos5), src22.element(pos0, pos1, pos2, pos3, pos4, pos5), src23.element(pos0, pos1, pos2, pos3, pos4, pos5), src24.element(pos0, pos1, pos2, pos3, pos4, pos5), src25.element(pos0, pos1, pos2, pos3, pos4, pos5), src26.element(pos0, pos1, pos2, pos3, pos4, pos5), src27.element(pos0, pos1, pos2, pos3, pos4, pos5), src28.element(pos0, pos1, pos2, pos3, pos4, pos5), src29.element(pos0, pos1, pos2, pos3, pos4, pos5));

 }
 }
 }
}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo6D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(6); reducePos++) {
    v = op(v, src.element(pos0, pos1, pos2, pos3, pos4, pos5, reducePos));
  }
  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = v;

 }
 }
 }
}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary6D(const TElementsOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary6D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5) = op(pos0, pos1, pos2, pos3, pos4, pos5, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

 }
 }
 }
}

// ======================== dimensionality: 7 ==================================

struct Pos7D {
   size_t pos[7];
    template<typename TArrayND>
   _dev static Pos7D fromLinearIdx(const TArrayND &ary, size_t idx) {
     Pos7D p;
     const size_t incr6 = 1;
     const size_t incr5 = incr6 * ary.shape(6);
     const size_t incr4 = incr5 * ary.shape(5);
     const size_t incr3 = incr4 * ary.shape(4);
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     p.pos[0] = idx / incr0;
     idx -= p.pos[0] * incr0;
     p.pos[1] = idx / incr1;
     idx -= p.pos[1] * incr1;
     p.pos[2] = idx / incr2;
     idx -= p.pos[2] * incr2;
     p.pos[3] = idx / incr3;
     idx -= p.pos[3] * incr3;
     p.pos[4] = idx / incr4;
     idx -= p.pos[4] * incr4;
     p.pos[5] = idx / incr5;
     idx -= p.pos[5] * incr5;
     p.pos[6] = idx / incr6;
     idx -= p.pos[6] * incr6;
     return p;
   }
    template<typename TArrayND>
   _dev static Pos7D fromLinearIdxWithLastDimSetToZero(const TArrayND &ary, size_t idx) {
     Pos7D p = fromLinearIdx(ary, idx);
     p[6] = 0;
     return p;
    }
    template<typename TArrayND>
   _dev size_t toLinearIdx(const TArrayND &ary) const {
     const size_t incr6 = 1;
     const size_t incr5 = incr6 * ary.shape(6);
     const size_t incr4 = incr5 * ary.shape(5);
     const size_t incr3 = incr4 * ary.shape(4);
     const size_t incr2 = incr3 * ary.shape(3);
     const size_t incr1 = incr2 * ary.shape(2);
     const size_t incr0 = incr1 * ary.shape(1);
     return incr0 * pos[0] + incr1 * pos[1] + incr2 * pos[2] + incr3 * pos[3] + incr4 * pos[4] + incr5 * pos[5] + incr6 * pos[6];
   }
  	_dev size_t &operator[] (const size_t dim) { return pos[dim]; }
  	_dev const size_t &operator[] (const size_t dim) const { return pos[dim]; }
};

template <size_t shape0, size_t shape1, size_t shape2, size_t shape3, size_t shape4, size_t shape5, size_t shape6>
struct ShapeStatic7D {
   char mDummy; // FIX: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t shape(const size_t dim) const {
      switch (dim) {
        case 0: return shape0;
        case 1: return shape1;
        case 2: return shape2;
        case 3: return shape3;
        case 4: return shape4;
        case 5: return shape5;
        case 6: return shape6;
        default: return 0;
      }
   }
};

struct ShapeDynamic7D {
   size_t mShape[7];
  	_dev size_t shape(const size_t dim) const { return mShape[dim]; }
};

template <size_t offset_, size_t stride0, size_t stride1, size_t stride2, size_t stride3, size_t stride4, size_t stride5, size_t stride6>
struct StrideStatic7D {
   char mDummy; // WORKAROUND: if struct is empty, MSVC and NVCC see different struct sizes
  	_dev size_t stride(const size_t dim) const {
      switch (dim) {
        case 0: return stride0;
        case 1: return stride1;
        case 2: return stride2;
        case 3: return stride3;
        case 4: return stride4;
        case 5: return stride5;
        case 6: return stride6;
        default: return 0;
      }
    }
   _dev size_t offset() const { return offset_; }
};

struct StrideDynamic7D {
   size_t mOffset;
   _dev size_t offset() const { return mOffset; }
   size_t mStride[7];
  	_dev size_t stride(const size_t dim) const { return mStride[dim]; }
};

template <typename TData, typename TShape, typename TStride>
struct ArrayND7D : TShape, TStride {
  typedef Pos7D Pos;
  typedef TData DataType;
  TData *mData;

  _dev size_t nDim() const { return 7; }
  _dev size_t index(const size_t pos0, const size_t pos1, const size_t pos2, const size_t pos3, const size_t pos4, const size_t pos5, const size_t pos6) const {
      return this->offset() + this->stride(0) * pos0 + this->stride(1) * pos1 + this->stride(2) * pos2 + this->stride(3) * pos3 + this->stride(4) * pos4 + this->stride(5) * pos5 + this->stride(6) * pos6;
  }
  _dev size_t index(const size_t *pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3] + this->stride(4) * pos[4] + this->stride(5) * pos[5] + this->stride(6) * pos[6];
  }
  _dev size_t index(const Pos7D &pos) const {
      return this->offset() + this->stride(0) * pos[0] + this->stride(1) * pos[1] + this->stride(2) * pos[2] + this->stride(3) * pos[3] + this->stride(4) * pos[4] + this->stride(5) * pos[5] + this->stride(6) * pos[6];
  }
  _dev size_t size() const {
    return this->shape(0) * this->shape(1) * this->shape(2) * this->shape(3) * this->shape(4) * this->shape(5) * this->shape(6);
  }
  _dev Pos7D linearIdxToPos(size_t idx) const { return Pos7D::fromLinearIdx(*this, idx); }
  _dev Pos7D linearIdxToPosWithLastDimSetToZero(size_t idx) const { return Pos7D::fromLinearIdxWithLastDimSetToZero(*this, idx); }
  _dev TData *data() { return mData; }
  _dev const TData *data() const { return mData; }
  _dev TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3, size_t pos4, size_t pos5, size_t pos6) {
    return data()[index(pos0, pos1, pos2, pos3, pos4, pos5, pos6)];
  }
  _dev const TData &element(size_t pos0, size_t pos1, size_t pos2, size_t pos3, size_t pos4, size_t pos5, size_t pos6) const {
    return data()[index(pos0, pos1, pos2, pos3, pos4, pos5, pos6)];
  }
  _dev TData &element(const size_t *pos) { return data()[index(pos)]; }
  _dev const TData &element(const size_t *pos) const { return data()[index(pos)]; }
  _dev TData &element(const Pos7D &pos) { return data()[index(pos)]; }
  _dev const TData &element(const Pos7D &pos) const { return data()[index(pos)]; }

  template <typename TElemwiseOp, typename TTarget, typename TSrc0>
  _dev static void elemwise1Ary(const TElemwiseOp &op, TTarget &trgt, TSrc0 &src0) {
    elemwise1Ary7D(op, trgt, src0);
  }
};

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7);

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0Ary7D(const TElemwiseOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op();

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src27.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src27.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src27.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src28.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src27.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src28.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary7DIndexed(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));
 const size_t pos[] {pos0, pos1, pos2, pos3, pos4, pos5, pos6};

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos, 7, src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src27.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src28.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src29.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30Ary7D(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(src0.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src1.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src2.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src3.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src4.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src5.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src6.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src7.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src8.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src9.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src10.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src11.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src12.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src13.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src14.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src15.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src16.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src17.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src18.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src19.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src20.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src21.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src22.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src23.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src24.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src25.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src26.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src27.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src28.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6), src29.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6));

 }
 }
 }
}

template <typename TElemwiseOp, typename TInitialOp, typename TTarget, typename TSrc>
_dev void reduceTo7D(const TElemwiseOp &op, const TInitialOp &initialOp, TTarget &trgt, const TSrc &src) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  typename TTarget::DataType v = initialOp();
  for (size_t reducePos = 0; reducePos < src.shape(7); reducePos++) {
    v = op(v, src.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6, reducePos));
  }
  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = v;

 }
 }
 }
}

template <typename TElementsOp, typename TTarget>
_dev void elements0Ary7D(const TElementsOp &op, TTarget &trgt) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0>
_dev void elements1Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elements2Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elements3Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elements4Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elements5Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elements6Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elements7Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elements8Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elements9Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elements10Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elements11Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elements12Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elements13Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elements14Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elements15Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elements16Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elements17Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elements18Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elements19Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elements20Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elements21Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elements22Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elements23Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elements24Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elements25Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elements26Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elements27Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elements28Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elements29Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28);

 }
 }
 }
}

template <typename TElementsOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elements30Ary7D(const TElementsOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 const size_t restElems = trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5) * trgt.shape(6);
 for (size_t posR = threadIdx.z + blockIdx.z * blockDim.z; posR < restElems;     posR += gridDim.z * blockDim.z) {
 for (size_t pos1 = threadIdx.y + blockIdx.y * blockDim.y; pos1 < trgt.shape(1); pos1 += gridDim.y * blockDim.y) {
 for (size_t pos0 = threadIdx.x + blockIdx.x * blockDim.x; pos0 < trgt.shape(0); pos0 += gridDim.x * blockDim.x) {
 size_t pos2 = posR;
 const size_t pos6 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 pos2 -= pos6 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4) * trgt.shape(5));
 const size_t pos5 = pos2 / (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 pos2 -= pos5 * (trgt.shape(2) * trgt.shape(3) * trgt.shape(4));
 const size_t pos4 = pos2 / (trgt.shape(2) * trgt.shape(3));
 pos2 -= pos4 * (trgt.shape(2) * trgt.shape(3));
 const size_t pos3 = pos2 / (trgt.shape(2));
 pos2 -= pos3 * (trgt.shape(2));

  trgt.element(pos0, pos1, pos2, pos3, pos4, pos5, pos6) = op(pos0, pos1, pos2, pos3, pos4, pos5, pos6, src0, src1, src2, src3, src4, src5, src6, src7, src8, src9, src10, src11, src12, src13, src14, src15, src16, src17, src18, src19, src20, src21, src22, src23, src24, src25, src26, src27, src28, src29);

 }
 }
 }
}

template <typename TElemwiseOp, typename TTarget>
_dev void elemwise0AryHeterogenous(const TElemwiseOp &op, TTarget &trgt) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op();

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0>
_dev void elemwise1AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1>
_dev void elemwise2AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2>
_dev void elemwise3AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3>
_dev void elemwise4AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4>
_dev void elemwise5AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5>
_dev void elemwise6AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6>
_dev void elemwise7AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7>
_dev void elemwise8AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8>
_dev void elemwise9AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9>
_dev void elemwise10AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10>
_dev void elemwise11AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11>
_dev void elemwise12AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12>
_dev void elemwise13AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13>
_dev void elemwise14AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14>
_dev void elemwise15AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15>
_dev void elemwise16AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16>
_dev void elemwise17AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17>
_dev void elemwise18AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18>
_dev void elemwise19AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19>
_dev void elemwise20AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20>
_dev void elemwise21AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21>
_dev void elemwise22AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22>
_dev void elemwise23AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23>
_dev void elemwise24AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)), src23.element(src23.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24>
_dev void elemwise25AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)), src23.element(src23.linearIdxToPos(idx)), src24.element(src24.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25>
_dev void elemwise26AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)), src23.element(src23.linearIdxToPos(idx)), src24.element(src24.linearIdxToPos(idx)), src25.element(src25.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26>
_dev void elemwise27AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)), src23.element(src23.linearIdxToPos(idx)), src24.element(src24.linearIdxToPos(idx)), src25.element(src25.linearIdxToPos(idx)), src26.element(src26.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27>
_dev void elemwise28AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)), src23.element(src23.linearIdxToPos(idx)), src24.element(src24.linearIdxToPos(idx)), src25.element(src25.linearIdxToPos(idx)), src26.element(src26.linearIdxToPos(idx)), src27.element(src27.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28>
_dev void elemwise29AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)), src23.element(src23.linearIdxToPos(idx)), src24.element(src24.linearIdxToPos(idx)), src25.element(src25.linearIdxToPos(idx)), src26.element(src26.linearIdxToPos(idx)), src27.element(src27.linearIdxToPos(idx)), src28.element(src28.linearIdxToPos(idx)));

 }
}

template <typename TElemwiseOp, typename TTarget, typename TSrc0, typename TSrc1, typename TSrc2, typename TSrc3, typename TSrc4, typename TSrc5, typename TSrc6, typename TSrc7, typename TSrc8, typename TSrc9, typename TSrc10, typename TSrc11, typename TSrc12, typename TSrc13, typename TSrc14, typename TSrc15, typename TSrc16, typename TSrc17, typename TSrc18, typename TSrc19, typename TSrc20, typename TSrc21, typename TSrc22, typename TSrc23, typename TSrc24, typename TSrc25, typename TSrc26, typename TSrc27, typename TSrc28, typename TSrc29>
_dev void elemwise30AryHeterogenous(const TElemwiseOp &op, TTarget &trgt, const TSrc0 &src0, const TSrc1 &src1, const TSrc2 &src2, const TSrc3 &src3, const TSrc4 &src4, const TSrc5 &src5, const TSrc6 &src6, const TSrc7 &src7, const TSrc8 &src8, const TSrc9 &src9, const TSrc10 &src10, const TSrc11 &src11, const TSrc12 &src12, const TSrc13 &src13, const TSrc14 &src14, const TSrc15 &src15, const TSrc16 &src16, const TSrc17 &src17, const TSrc18 &src18, const TSrc19 &src19, const TSrc20 &src20, const TSrc21 &src21, const TSrc22 &src22, const TSrc23 &src23, const TSrc24 &src24, const TSrc25 &src25, const TSrc26 &src26, const TSrc27 &src27, const TSrc28 &src28, const TSrc29 &src29) {
 for (size_t idx = threadIdx.x + blockIdx.x * blockDim.x; idx < trgt.size(); idx += gridDim.x * blockDim.x) {

  trgt.element(trgt.linearIdxToPos(idx)) = op(src0.element(src0.linearIdxToPos(idx)), src1.element(src1.linearIdxToPos(idx)), src2.element(src2.linearIdxToPos(idx)), src3.element(src3.linearIdxToPos(idx)), src4.element(src4.linearIdxToPos(idx)), src5.element(src5.linearIdxToPos(idx)), src6.element(src6.linearIdxToPos(idx)), src7.element(src7.linearIdxToPos(idx)), src8.element(src8.linearIdxToPos(idx)), src9.element(src9.linearIdxToPos(idx)), src10.element(src10.linearIdxToPos(idx)), src11.element(src11.linearIdxToPos(idx)), src12.element(src12.linearIdxToPos(idx)), src13.element(src13.linearIdxToPos(idx)), src14.element(src14.linearIdxToPos(idx)), src15.element(src15.linearIdxToPos(idx)), src16.element(src16.linearIdxToPos(idx)), src17.element(src17.linearIdxToPos(idx)), src18.element(src18.linearIdxToPos(idx)), src19.element(src19.linearIdxToPos(idx)), src20.element(src20.linearIdxToPos(idx)), src21.element(src21.linearIdxToPos(idx)), src22.element(src22.linearIdxToPos(idx)), src23.element(src23.linearIdxToPos(idx)), src24.element(src24.linearIdxToPos(idx)), src25.element(src25.linearIdxToPos(idx)), src26.element(src26.linearIdxToPos(idx)), src27.element(src27.linearIdxToPos(idx)), src28.element(src28.linearIdxToPos(idx)), src29.element(src29.linearIdxToPos(idx)));

 }
}

