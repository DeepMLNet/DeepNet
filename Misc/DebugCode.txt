module CudaCodeGen

open Op
open ExprEvalSequencer
open ManagedCuda


/// CUDA context
let cuda = new CudaContext(createNew=false)


module CudaNDArray =   
    let cuMod = cuda.LoadModule("NDArray.cu.obj")

    let scalarConstKernel =
        CudaKernel("scalarConst", cuMod, cuda)

    let scalarConst value ndArray =
        scalarConstKernel.Run([| value |])




//let generateCudaCalls eseq =
//    
//    match eseq with
//    | ExeSequenceItem(exeOp, expr) ->
//        match exeOp with
//        | LeafExe(target, op) ->
//            match op with 
//            | ScalarConst f ->
                

let testMe () =
    let cuda = new CudaContext(createNew=false)
    let cuMod = cuda.LoadModulePTX("NDArray.cu.obj")
    let myKernel = CudaKernel("sayHi", cuMod, cuda)
    myKernel.Run()
    //CudaNDArray.scalarConst 1 ()





                
                printfn "==================================="
                for expr, erqsForExpr in erqsByExpr do
                    printfn "requests for %A" expr
                    printfn "count:         %d" (List.length erqsForExpr)
                    printfn "expr occurs:   %d" (exprOccurrences expr)
                    printfn "------------------------------------------"
                printfn "==================================="



				
        //printfn "CUDA Recipe:"
        //printfn "Exec calls:"
        //printfn "%A" rcpt.ExecCalls





let plotCurvePredictions (cfg: Cfg) curveDir =
    let bp = FsPickler.CreateBinarySerializer()
    let jp = FsPickler.CreateJsonSerializer(indent=true)

    let mlpController = MLPController cfg.MLPControllerCfg
    mlpController.Load cfg.ModelFile
    
    let rfs =
        seq {
            for subDir in Directory.EnumerateDirectories curveDir do
                let recordedFile = Path.Combine (subDir, "recorded.dat")
                if File.Exists recordedFile then yield recordedFile, subDir
                //&& not (recordedFile.Contains "Curve5Cfg4") then
                //&& not (recordedFile.Contains "Curve5Cfg3") then //&& not (recordedFile.Contains "Curve5Cfg2")      then
        } |> Seq.toList
     
           
    for i = 0 to 2 do
        printfn "iteration %d" i
    
        //Trace.startSession (sprintf "iter%d" i)

        for recordedFile, subDir in rfs do
            printfn "%s" recordedFile
            use tr = File.OpenRead recordedFile
            let recMovement : Movement.RecordedMovement = bp.Deserialize tr
            use tr = File.OpenRead (Path.Combine (subDir, "curve.dat"))
            let curve : Movement.XY list = bp.Deserialize tr

            // predict
            let ds = recordedMovementAsFollowSamples recMovement |> Dataset.FromSamples 
            let biotac = ds.All.Biotac :?> ArrayNDHostT<_> |> ArrayNDCuda.toDev
            let pred = mlpController.Predict biotac :?> ArrayNDCudaT<_>
            let predDistY = pred.[*, 0] |> ArrayNDCuda.toHost |> ArrayNDHost.toList |> List.map float

            printfn "predicated:"
            printfn "%A" predDistY
            //if recordedFile.Contains "Curve5Cfg5" then
            //    exit 0

            //Threading.Thread.Sleep(5000)

        //let trace = Trace.endSession ()
        //use tw = File.CreateText (trace.Name + ".txt")
        //trace |> Trace.dump tw 

