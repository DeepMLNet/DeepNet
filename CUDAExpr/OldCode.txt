

//template <typename TShape, typename TStride, float *Tdata>
//class NDArray3DFixed
//{
//public:
//	typedef TShape Shape;
//	typedef TStride Stride;
//
//	_dev size_t shape(const size_t dim) const
//	{
//		return TShape::shape(dim);
//	}
//
//	_dev size_t stride(const size_t dim) const
//	{
//		return TStride::stride(dim);
//	}
//
//	_dev size_t size() const
//	{
//		return shape(0) * shape(1) * shape(2);
//	}
//
//	_dev static size_t allocation() const
//	{
//		return max(shape(0) * stride(0), max(shape(1) * stride(1), shape(2) * stride(2)))
//	}
//
//	_dev float *data()
//	{
//		return Tdata;
//	}
//
//	_dev const float *data() const
//	{
//		return Tdata;
//	}
//
//	_dev float &element(const size_t pos0, const size_t pos1, const size_t pos2)
//	{
//		return data()[TStride::offset(pos0, pos1, pos2)];
//	}
//
//	_dev const float &element(const size_t pos0, const size_t pos1, const size_t pos2) const
//	{
//		return data()[TStride::offset(pos0, pos1, pos2)];
//	}
//};


template <typename TShape, typename TStride>
class NDArray3DPointer
{
public:
	typedef TShape Shape;
	typedef TStride Stride;


	_dev static size_t allocation() 
	{
		return max(shape(0) * stride(0), max(shape(1) * stride(1), shape(2) * stride(2))) * sizeof(float);
	}

};






Variadic:

#pragma once

template <size_t stride, size_t ...rStrides>
class Stride
{
public:
	template<class ...size_ts>
	_dev static size_t offset(size_t pos, size_ts... rpos)
	{
		return stride * pos + Stride<rStrides...>::offset(rpos...);
	}

	_dev static size_t nDim()
	{
		return 1 + Stride<rStrides...>::nDim();
	}
};

template <size_t stride>
class Stride<stride>
{
public:
	_dev static size_t offset(size_t pos)
	{
		return stride * pos;
	}

	_dev static size_t nDim()
	{
		return 1;
	}
};


