        /// all streams that are used by the successors of ExecUnit "eu"
        let rec usedStreamsOfExecUnitAndItsSuccessors (eu: ExecUnitT<'e>) = 
            seq {
                for seu in Seq.append (Seq.singleton eu) (coll.AllSuccessorsOf eu) do
                    if streamOfUnit.ContainsKey seu.Id then 
                        yield streamOfUnit.[seu.Id]
            } |> Seq.cache

        /// all streams that can currently be reused below ExecUnit "eu"
        let availableStreamsBelowExecUnit (eu: ExecUnitT<'e>) =
            let rec build (cache: Map<ExecUnitIdT, StreamT seq>) eu = seq {
                // extend usedStreamsOfExecUnitAndItsSuccessors cache by our dependants
                let mutable cache = cache
                for dep in coll.DependantsOf eu do
                    if not (cache |> Map.containsKey dep.Id) then
                        cache <- cache |> Map.add dep.Id (usedStreamsOfExecUnitAndItsSuccessors dep)

                // streams that are used by our successors
                let usedBySuccessors = 
                    coll.DependantsOf eu
                    |> Seq.collect (fun dep -> cache.[dep.Id])

                // check if eu's stream is available
                let euStream = streamOfUnit.[eu.Id]
                if not (usedBySuccessors |> Seq.contains euStream) then
                    yield euStream

                // extend usedStreamsOfExecUnitAndItsSuccessors cache by ourselves
                let usedByEuAndSuccessors =
                    Seq.append (Seq.singleton euStream) usedBySuccessors
                cache <- cache |> Map.add eu.Id usedByEuAndSuccessors

                // yield streams available from above
                for parent in coll.DependsOn eu do
                    yield! build cache parent 
            }

            build (Map [eu.Id, Seq.empty]) eu

        /// Find an event object id that can be used by the given ExecUnit "eu".
        /// This can either be an existing event object id or a newly generated one.
        let findAvailableEventObjectIdFor (eu: ExecUnitT<'e>)  =           
            let rec tryFindReuseable (candEmitter: ExecUnitT<'e>) =          
                match eventOfUnit.TryFind candEmitter.Id with
                | Some candEvt when
                    // An event "candEvt" emitted by "candEmitter" is reusable by "eu", if ...
                    // 1. eu depends on all dependants of the event emitter and 
                    coll.DependantsOf candEmitter
                    |> Seq.forall (fun depOfEmitter -> coll.IsSuccessorOf eu depOfEmitter)
                    &&
                    // 2. the event has not been already reused by a successor of the event emitter.
                    coll.AllSuccessorsOf candEmitter
                    |> Seq.forall (fun succOfEmitter -> 
                        match eventOfUnit.TryFind succOfEmitter.Id with
                        | Some succOfEmitterEvt when 
                            succOfEmitterEvt.EventObjectId = candEvt.EventObjectId -> false
                        | _ -> true)
                    -> Some candEvt.EventObjectId
                | _ ->
                    // Try the units above "candEmitter" if "candEvt" cannot be used.
                    coll.DependsOn candEmitter |> Seq.tryPick tryFindReuseable

            // if possible, reuse an existing event object
            match coll.DependsOn eu |> Seq.tryPick tryFindReuseable with
            | Some id -> id
            | None -> newEventObjectId ()




                /// all streams that are reusable below the units we depend on            
                let availStreams =
                    coll.DependsOn eu 
                    |> Seq.collect availableStreamsBelowExecUnit
                    |> Seq.cache
                /// all streams of the units we directly depend on, that are reusable below the units we depend on            
                let streamTakeOverCands = 
                    eu.DependsOn 
                    |> Seq.map (fun pId -> streamOfUnit.[pId]) 
                    |> Seq.filter (fun strm -> availStreams |> Seq.contains strm)

                // If we can take over a stream, then take over the one with least commands in it.
                // Otherwise, use the first available reusable stream or create a new one.
                let euStream = 
                    if Seq.isEmpty streamTakeOverCands then 
                        if Seq.isEmpty availStreams then newStream ()
                        else Seq.head availStreams
                    else streamTakeOverCands |> Seq.minBy streamLength


                        let evtObjId = findAvailableEventObjectIdFor (coll.ById endingUnitId)               

